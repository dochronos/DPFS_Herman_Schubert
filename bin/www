#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("quantumbloom:server");
const http = require("http");

// Obtener y configurar el puerto
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Crear servidor HTTP
const server = http.createServer(app);

// Iniciar servidor
server.listen(port, () => {
  console.log("-".repeat(80));
  console.log(`üå∏ Quantum Bloom corriendo en: http://localhost:${port}`);
  console.log(`üìö Documentaci√≥n API: http://localhost:${port}/api-docs`);
  console.log("-".repeat(80));
});

server.on("error", onError);
server.on("listening", onListening);

// Normalizar el puerto
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port;  // port number
  return false;
}

// Manejo de errores
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requiere privilegios elevados`);
      process.exit(1);
    case "EADDRINUSE":
      console.error(`${bind} ya est√° en uso`);
      process.exit(1);
    default:
      throw error;
  }
}

// Log cuando el servidor est√° escuchando
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Escuchando en ${bind}`);
}
